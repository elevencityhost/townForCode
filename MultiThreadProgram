JAVA-Exectors提供的四种线程池详解
任务提交到线程池后是遵循如下规则执行：
1、execute一个线程后，如果线程池中的线程数未达到核心线程数，则会立马启用一个核心线程去执行。
2、execute一个线程后，如果线程池中的线程数已经达到核心线程数，且workQueue未满，则将新线程放入workQueue中等待执行
3、execute一个线程后，如果线程池中的线程数已经达到核心线程数并且workQueue已满，但是未超过非核心线程数，则开启一个非核心线程来执行任务
4、execute一个线程后，如果线程池中的线程数已经超过非核心线程数，则按照Handler策略做对应的方案，拒绝交给调用线程处理等。



由于核心线程数为3，workQueue的大小为128，所以我们的线程的执行应该是先启动三个核心线程来执行任务，剩余的27个任务全部存在workQueue中，等待核心线程空余出来之后执行。


首先打印出来0，1，2说明往核心线程添加了三个任务，然后将3，4，5，6，7，8六个任务添加到了任务队列中，接下来要添加的任务因为核心线程已满，队列已满所以就直接开一个非核心线程来执行，因此后添加的任务反而会先执行（3，4，5，6，7，8都在队列中等着），所以我们看到的打印结果是先是0～2，然后9～29，然后3~8。
newFixedThreadPool
是一个核心线程数量固定的线程池

核心线程数和最大线程数一样，说明在FixedThreadPool中没有非核心线程，所有的线程都是核心线程，且线程的超时时间为0，说明核心线程即使在没有任务可执行的时候也不会被销毁（这样可让FixedThreadPool更快速的响应请求），最后的线程队列是一个LinkedBlockingQueue，但是LinkedBlockingQueue却没有参数，这说明线程队列的大小为Integer.MAX_VALUE（2的31次方减1），OK，看完参数，我们大概也就知道了FixedThreadPool的工作特点了，当所有的核心线程都在执行任务的时候，新的任务只能进入线程队列中进行等待，直到有线程被空闲出来。
newSingleThreadExecutor
singleThreadExecutor和FixedThreadPool很像，不同的就是SingleThreadExecutor的核心线程数只有1

newCachedThreadPool
CachedTreadPool一个最大的优势是它可以根据程序的运行情况自动来调整线程池中的线程数量

CachedThreadPool中是没有核心线程的，但是它的最大线程数却为Integer.MAX_VALUE，另外，它是有线程超时机制的，超时时间为60秒，这里它使用了SynchronousQueue作为线程队列，SynchronousQueue的特点上文已经说过了，这里不再赘述。那么我们提交到CachedThreadPool消息队列中的任务在执行的过程中有什么特点呢？由于最大线程数为无限大，所以每当我们添加一个新任务进来的时候，如果线程池中有空闲的线程，则由该空闲的线程执行新任务，如果没有空闲线程，则创建新线程来执行任务。根据CachedThreadPool的特点，我们可以在有大量任务请求的时候使用CachedThreadPool，因为当CachedThreadPool中没有新任务的时候，它里边所有的线程都会因为超时而被终止。
newScheduledThreadPool
ScheduledThreadPool是一个具有定时定期执行任务功能的线程池
它的核心线程数量是固定的（我们在构造的时候传入的），但是非核心线程是无穷大，当非核心线程闲置时，则会被立即回收。
