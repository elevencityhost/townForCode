1.1线程安全
概念：当多个线程访问某一个类（对象或方法）时，这个类始终都能表现出正确的行为，那么这个类（对象或方法就是线程安全的）。


当多个线程访问myThread的run方法时，以排队的方式进行处理（这里排队是按照CPU分配的先后顺序而定的），一个线程想要执行synchronized修饰的方法里的代码，首先是尝试获得锁，如果拿到锁，执行synchronized代码体内容；拿不到锁，这个线程就会不断地尝试获得这把锁，直到拿到为止，而且是多个线程同时去竞争这把锁。（也就是会有锁竞争的问题）。

同步的目的是为了线程安全，其实对于线程安全来说，需要满足两个特性：原子性、可见性。

A线程先持有Object对象的lock锁，B线程如果在这个时候调用对象中的同步（synchronized）方法则需等待，也就是同步。
A线程先持有Object对象的Lock锁，B线程可以以异步的方式调用对象中非synchronized修饰的方法。

在我们对一个对象的方法加锁的时候，需要考虑业务的整体性，即为setValue/getValue方法同时加锁synchronized同步关键字，保证业务（service）的原子性，不然会出现业务错误（也从侧面保证业务的一致性）。